// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (id, created_at, updated_at, title, url, description, published_at, feed_id)
VALUES(
    $1,$2,$3,$4,$5,$6,$7,$8
)
`

type CreatePostParams struct {
	ID          int32
	CreatedAt   time.Time
	UpdatedAt   sql.NullTime
	Title       string
	Url         string
	Description string
	PublishedAt time.Time
	FeedID      int32
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.FeedID,
	)
	return err
}

const getPostsForUser = `-- name: GetPostsForUser :many
SELECT posts.id, posts.created_at, posts.updated_at, title, posts.url, description, published_at, feed_id, feeds.id, feeds.name, feeds.url, user_id, last_fetched_at, users.id, users.created_at, users.updated_at, users.name FROM posts
INNER JOIN feeds ON feeds.id = posts.feed_id
INNER JOIN users ON feeds.user_id = users.id
WHERE users.id = $1
`

type GetPostsForUserRow struct {
	ID            int32
	CreatedAt     time.Time
	UpdatedAt     sql.NullTime
	Title         string
	Url           string
	Description   string
	PublishedAt   time.Time
	FeedID        int32
	ID_2          int32
	Name          string
	Url_2         string
	UserID        int32
	LastFetchedAt sql.NullTime
	ID_3          int32
	CreatedAt_2   time.Time
	UpdatedAt_2   time.Time
	Name_2        string
}

func (q *Queries) GetPostsForUser(ctx context.Context, id int32) ([]GetPostsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsForUser, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsForUserRow
	for rows.Next() {
		var i GetPostsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.PublishedAt,
			&i.FeedID,
			&i.ID_2,
			&i.Name,
			&i.Url_2,
			&i.UserID,
			&i.LastFetchedAt,
			&i.ID_3,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.Name_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
